package LeetCode.problem; /** * @author: lingjunhao * create at:  19/3/11  下午3:52 * @description: */import java.util.*;public class Num001 {   private Stack<Integer> stackData;   private Stack<Integer> stackMin;   public Num001(){       this.stackData=new Stack<Integer>();       this.stackMin=new Stack<Integer>();   }   public int getmin(){       if (this.stackMin.isEmpty()){           throw new RuntimeException("Your StackMin is empty!!!");       }       return this.stackMin.peek();   }   public void push(int newNum){       if (this.stackMin.isEmpty()){           this.stackMin.push(newNum);//如果栈顶元素为空则压入新数据       }else if (newNum<=this.getmin()){           this.stackMin.push(newNum);//如果新元素比栈顶元素小爷压入       }       this.stackData.push(newNum);   }   public int pop(){       if (this.stackMin.isEmpty()){           throw new RuntimeException("Your stack is empty！！");       }       int value=this.stackMin.pop();       return value;   }    @Override    public String toString() {        return "LeetCode.problem.Num001{" +                "stackData=" + stackData +                ", stackMin=" + stackMin +                '}';    }    public static void main(String[] args){       Num001 a=new Num001();       a.push(3);       a.push(3);       a.push(2);       a.push(7);       a.push(5);       a.push(1);       System.out.println(a.toString());       System.out.println(a.pop());   }}