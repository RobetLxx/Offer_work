package LeetCode.problem;import java.util.Stack;/** * @author: lingjunhao * create at:  19/3/16  下午2:04 * @description: 用一个栈实现另一个栈的排序 */public class Num005 {    private Stack<Integer> stack;    private Stack<Integer> help;    public Num005() {        help=new Stack<Integer>();    }    public Stack<Integer> getStack() {        return stack;    }    public void setStack(Stack<Integer> stack) {        this.stack = stack;    }    public Stack<Integer> getHelp() {        return help;    }    public void setHelp(Stack<Integer> help) {        this.help = help;    }    @Override    public String toString() {        return "LeetCode.problem.Num005{" +                "stack=" + stack +                ", help=" + help +                '}';    }    public void sortStackByHelp(){        while (!stack.isEmpty()){            int curr=stack.pop();            while (!help.isEmpty()&&help.peek()<curr){                stack.push(help.pop());            }            help.push(curr);        }        while (!help.isEmpty()){            stack.push(help.pop());        }    }    public static void main(String[] args) {        Num005 sort=new Num005();        Stack<Integer> stack=new Stack<Integer>();        stack.push(4);        stack.push(7);        stack.push(9);        stack.push(3);        stack.push(17);        stack.push(32);        stack.push(13);        sort.setStack(stack);        System.out.println(sort.toString());        sort.sortStackByHelp();        System.out.println(sort.toString());    }}