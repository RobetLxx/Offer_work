package Algorithm_interview_week1;import java.util.*;import static java.lang.Math.abs;import static java.lang.Math.max;import static java.lang.Math.min;public class wrap {    public static int R;    public static int C;    public static int[][] bfs(int [][]x,String[] w,int k){        Queue<Map<Integer,Integer>> queue = new ArrayDeque<>();        for (int i = 0; i < R; i++) {            for (int j = 0; j < C; j++) {                if (w[i].charAt(j)=='1'){                    Map<Integer,Integer> q=new HashMap<Integer, Integer>();                    q.put(i,j);                    x[i][j]=0;//补给站到自己的距离为0;                    queue.add(q);//补给站位置添加进去                }else {                    x[i][j]=-1;//初始化补给站到自己的距离                }            }        }        int dx[]={-1,0,1,0};        int dy[]={0,1,0,-1};        while (!queue.isEmpty()){            Map t=queue.peek();            queue.poll();            Set<Integer> key=t.keySet();            int m=key.hashCode();            int n= (int) t.get(m);            int distance=x[m][n];            if (distance==k)continue;            for (int i = 0; i < 4; i++) {                int a=(int)m+dx[i];                int b=n+dy[i];                if (a>=0&&a<C&&b>=0&&b<R&&x[a][b]==-1){                    x[a][b]=distance+1;                    Map<Integer,Integer> q=new HashMap<Integer, Integer>();                    q.put(a,b);                    queue.add(q);                }            }        }        return x;    }    public static Boolean check(int[][] x,String[] w,int k){        x=bfs(x,w,k);        int min_sum =(int)(Double.POSITIVE_INFINITY ), max_sum = (int)(Double.NEGATIVE_INFINITY);        int min_sub = (int)(Double.POSITIVE_INFINITY ), max_sub = (int)(Double.NEGATIVE_INFINITY);        for (int i = 0; i < R; i++) {            for (int j = 0; j < C; j++) {                if (x[i][j]==-1){                    min_sum = min(min_sum, i + j);                    max_sum = max(max_sum, i + j);                    min_sub = min(min_sub, i - j);                    max_sub = max(max_sub, i - j);                }            }        }        if (min_sum == (int)(Double.POSITIVE_INFINITY )) return true;        for (int i = 0; i < C; i ++ )            for (int j = 0; j < R; j ++ )                if (w[i].charAt(j)=='1')                {                    int sum = max(abs(i + j - min_sum), abs(i + j - max_sum));                    int sub = max(abs(i - j - min_sub), abs(i - j - max_sub));                    if (max(sum, sub) <= k) return true;                }        return false;            }    public static void main(String[] args) {        Scanner scanner=new Scanner(System.in);        int T=scanner.nextInt();        int key=1;        while (T>0){            R=scanner.nextInt();            C=scanner.nextInt();            int [][]x=new int[R][C];            Scanner scanner1=new Scanner(System.in);            String[] w=new String[C];//            System.out.println(w.length);            for (int i = 0; i <w.length; i++) {                w[i]=scanner1.next();            }            int l=0;            int r=R+C;            while (l<r){                int mid=((l+r)>>1);                if (check(x,w,mid))r=mid;                else l=mid+1;            }            T--;            System.out.println("Case #"+key+": "+r);            key++;        }    }}