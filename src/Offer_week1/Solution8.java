package Offer_week1;import java.util.Stack;/** * @author: lingjunhao * create at:  19/4/20  下午5:31 * @description: 用两个栈实现对列 */class MyQueue {     Stack<Integer> stack1=new Stack<Integer>();     Stack<Integer> stack2=new Stack<Integer>();    /** Initialize your data structure here. */    public MyQueue() {    }    /** Push element x to the back of queue. */    public void push(int x) {        stack1.push(x);    }    /** Removes the element from in front of queue and returns that element. */    public int pop() {        if (!stack2.isEmpty()){            while (!stack1.isEmpty()){                int data= stack1.pop();                stack2.push(data);            }        }        //为空时，输出异常        if (stack2.isEmpty()){            throw new IllegalArgumentException("queue is empty!!!");        }        return stack2.pop();    }    /** Get the front element. */    public int peek() {        if (!stack2.isEmpty()){            while (!stack1.isEmpty()){                int data=stack1.peek();                stack2.push(data);            }        }        //为空时，输出异常        if (stack2.isEmpty()){            throw new IllegalArgumentException("queue is empty!!!");        }        return stack2.peek();    }    /** Returns whether the queue is empty. */    public boolean empty() {        if (stack1.isEmpty()&&stack2.isEmpty()){            return true;        }else {            return false;        }    }}public class Solution8 {    public static void main(String[] args) {        MyQueue queue=new MyQueue();        queue.push(1);        queue.push(2);        System.out.println(queue.peek());        System.out.println(queue.pop());        System.out.println(queue.empty());    }}