package LeetCode.problem;import java.util.Stack;/** * @author: lingjunhao * create at:  19/3/12  下午2:41 * @description: 面试第三题如何仅用递归函数和栈操作逆序一个栈 */public class Num003 {    private Stack<Integer> stack;    public Stack<Integer> getStack() {        return stack;    }    public void setStack(Stack<Integer> stack) {        this.stack = stack;    }    @Override    public String toString() {        return "LeetCode.problem.Num003{" +                "stack=" + stack +                '}';    }    public Num003() {        super();    }    public static int getAndRemoveLastElement(Stack<Integer> stack){//获取最后一个元素并且移除        int result=stack.pop();        if (stack.isEmpty()){            return result;        }else{            int last=getAndRemoveLastElement(stack);            stack.push(result);            return last;        }    }    public static void reverse(Stack<Integer> stack){//逆序栈        if (stack.isEmpty()){            return;        }        int i=getAndRemoveLastElement(stack);        reverse(stack);        stack.push(i);    }    public static void main(String[] args) {        Num003 num003=new Num003();        Stack<Integer> stack=new Stack<Integer>();        stack.push(1);        stack.push(2);        stack.push(3);        stack.push(4);        stack.push(5);        num003.setStack(stack);        System.out.println(num003.toString());        num003.reverse(num003.getStack());        System.out.println(num003.toString());    }}